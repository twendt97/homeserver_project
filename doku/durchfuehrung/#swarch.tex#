\section{Softwarearchitektur}
\label{sec:sw_arch}

\subsection{Deployment der Container und der Anwendungen}
\label{sec:sw_arch_depl}


Im Folgenden wird das Deployment der Anwendungen auf dem Server und die interne
Kommunikation der Anwendungen vorgestellt

Wie bereits in \ref{sec:software} angedeutet, werden die Applikationen durch
Kapselung in Docker-Containern organisiert und vom Betriebssystem getrennt.

\begin{figure}[h]
  \centering
  \includegraphics[scale=1]{durchfuehrung/figures/DeploymentOS}
  \caption[Deployment-Diagramm Applikationen und OS]{Komponentendiagramm der
    eingesetzten Softwarekomponenten und ihre Beziehung zum Betriebssystem. Die
    Abhängigkeit stereotypisiert mit $\ll$deploy$\gg$ bedeutet hierbei, dass die
    Komponente die jeweilige Ziel\-komponente als Laufzeitumgebung nutzt.}
  \label{fig:deplos}
\end{figure}

\newpage

Das Deployment der Anwendungen selbst erfolgt dann auf die Docker-Container, wie
in Abbildung \ref{fig:depldb} gezeigt. Je nach Konfiguration findet die
Anwendung ein vollständiges Betriebssystem mit allen Abhängigkeiten vor, die im
Dockerfile definiert wurden.

\begin{figure}[h]
  \centering
  \includegraphics{durchfuehrung/figures/DeploymentDB}
  \includegraphics{durchfuehrung/figures/DeploymentRP}
  \includegraphics{durchfuehrung/figures/DeploymentSSL}
  \caption[Deployment-Diagramm Anwendungen]{Deployment der Anwendungen auf die
    dazugehörigen Docker-Container}
  \label{fig:depldb}
\end{figure}

\newpage
\subsection{Starten der Docker-Container}
\label{sec:sw_arch_start}

Die einfachste Möglichkeit, einen Docker-Container zu starten, ist die Eingabe
des Befehls \texttt{docker run <image\_name>}. Ein Image ist ein mit
\texttt{docker build} gebautes Dockerfile vergleichbar mit dem Image eines
Betriebssystems. Mit dem \texttt{docker run} Befehl wird dieses gestartet und es
entsteht die Instanz eines Images, ein Container. Mehr Informationen zum Befehl \texttt{docker run} ist in \cite{docker_run_reference} zu finden.

Die beschriebene Methode ist für einfache Tests gut verwendbar. Ist jedoch ein
komplexes Gebilde aus Containern zu bauen, so ist es nicht zielführend bei jedem
Start alle Container von Hand zu starten. Hierfür wird von Docker das Werkzeug
Docker Compose bereit gestellt. Dieses liest eine Datei aus (standardmäßig
\texttt{docker-compose.yml}), in der alle Optionen definiert sind, mit denen die
Container sonst mit \texttt{docker run} gestartet werden. Mehr Informationen zu Docker Compose sind in \cite{docker_compose_reference} zu finden.

Im hier vorgestellten System wurde eine \texttt{docker-compose.yml}-Datei für
Basisdienste wie die Datenbank und den Reverse Proxy, sowie eine Datei für die
konkrete Anwendung wie die Nextcloud. Dieses Verfahren ermöglicht eine getrennte
Verwaltung von Infrastruktur und Anwendung.

\subsection{Interne Kommunikation der Container}
\label{sec:sw_arch_kom}

Um eine Kommunikation zwischen den Containern zu ermöglichen wird das Feature
\textit{network} von Docker genutzt. Dieses ermöglicht den Aufbau virtueller
TCP/IP-Netzwerke innerhalb einer Maschine (=\textit{Bridge}-Netzwerk) oder auch
maschinenübergreifend (=\textit{Overlay}-Netzwerk) zum Aufbau von Clustern. Da jeder Container eine kleine virtuelle Maschine darstellt, verfügt auch jeder Container über eine Netzwerkschnittstelle, mit der er dem ausgewählten Netzwerk beitreten kann.

Im vorliegenden Projekt wurden ausschließlich Bridge Netzwerke genutzt, da nur
eine Maschine vorhanden ist. Dabei wurden die Netzwerke \textit{frontend} und
\textit{backend} eingerichtet. Dies ermöglicht eine virtuelle Trennung zwischen
der Benutzerseite (z.B. der Reverse-Proxy, der Nutzeranfragen von außen
verarbeitet) und dem Server-Backend (z.B. die Datenbank). Abbildung
\ref{fig:compsw} zeigt die Beziehung der Container untereinander.

\begin{landscape}

\begin{figure}[h]
  \centering
  \includegraphics[angle=0, scale=1]{durchfuehrung/figures/CompositionSW}
  \caption[Kompositionsdiagramm der Docker-Container]{Kompositionsdiagramm der eingesetzten Docker-Container. Die Docker-Container sind jeweils über die passenden Bridge-Netzwerke \texttt{frontend} und \texttt{backend} miteinander verbunden. Die Datenbank und die Nextcloud nutzen den von ZFS verwalteten Speicherpool als Speicher-Backend}
  \label{fig:compsw}
\end{figure}

\end{landscape}



%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../doku_server"
%%% End:
